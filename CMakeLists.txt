cmake_minimum_required(VERSION 3.0.2)
project(wrp_ros)

## Compile as C++11, supported in ROS Kinetic and newer
add_compile_options(-std=c++11)

string(REPLACE ":" ";" CMAKE_PREFIX_PATH "$ENV{CMAKE_PREFIX_PATH}")
list(APPEND CMAKE_PREFIX_PATH "/opt/weston_robot/lib/cmake")

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  message_generation
  roscpp
  sensor_msgs
  geometry_msgs
  std_msgs
  tf2
  tf2_ros
  actionlib
  actionlib_msgs
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)
find_package(wrp_sdk 1.0.0 REQUIRED)

find_package(PkgConfig REQUIRED)
pkg_check_modules(LelyIO QUIET IMPORTED_TARGET liblely-io2)
pkg_check_modules(LelyCOAPP QUIET IMPORTED_TARGET liblely-coapp)

set(BUILD_PERIPH_MODULE OFF)
if(LelyIO_FOUND AND LelyCOAPP_FOUND)
    message(STATUS "Lely-core libraries found, peripheral module will be included")
    set(BUILD_PERIPH_MODULE ON)
else()
    message(WARNING "CANopen-related dependencies are not found, ROS nodes for peripherals will not be built. Run the following commands to install the missing libraries:
    $ sudo apt-get install -y software-properties-common 
    $ sudo add-apt-repository ppa:lely/ppa && sudo apt-get update
    $ sudo apt-get install -y pkg-config liblely-coapp-dev liblely-co-tools")
endif()

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## Generate messages in the 'msg' folder
add_message_files(
    FILES
    ActuatorState.msg
    ActuatorStateArray.msg
    DriverState.msg
    LiftStatus.msg
    LightControlType.msg
    MotionCommand.msg
    MotionState.msg
    MotorState.msg
    RangeData.msg
    RangeDataType.msg
    RcState.msg
    SystemState.msg
    PowerRegulatorChannelState.msg
    PowerRegulatorDeviceState.msg
)

## Generate services in the 'srv' folder
add_service_files(
  FILES
  AccessControl.srv
  AssistedModeControl.srv
  LiftQuery.srv
  LightControl.srv
  MotionReset.srv
  PowerRegulatorControl.srv
)

# Generate actions in the 'action' folder
add_action_files(
  FILES
  LiftControl.action
)

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  actionlib_msgs
  std_msgs
  geometry_msgs
)

catkin_package(CATKIN_DEPENDS std_msgs message_runtime)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################

catkin_package(
 INCLUDE_DIRS include
 LIBRARIES wrp_ros
 CATKIN_DEPENDS message_generation roscpp sensor_msgs std_msgs actionlib actionlib_msgs
 DEPENDS wrp_sdk 
)

###########
## Build ##
###########

include_directories(
  include
  ${catkin_INCLUDE_DIRS}
)

add_library(wrp_sdk_ros STATIC src/mobile_base/mobile_base_ros.cpp)
target_link_libraries(wrp_sdk_ros ${catkin_LIBRARIES} westonrobot::wrp_sdk_robot)
add_dependencies(wrp_sdk_ros ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

add_executable(mobile_base_node src/mobile_base/mobile_base_node.cpp)
target_link_libraries(mobile_base_node wrp_sdk_ros ${catkin_LIBRARIES})

add_executable(lift_controller_node src/peripheral/lift_controller_node.cpp)
target_link_libraries(lift_controller_node westonrobot::wrp_sdk ${catkin_LIBRARIES})
add_dependencies(lift_controller_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})


# peripheral device support
if(BUILD_PERIPH_MODULE)
    add_executable(gps_receiver_node src/peripheral/gps_receiver_node.cpp)
    target_link_libraries(gps_receiver_node westonrobot::wrp_sdk ${catkin_LIBRARIES})
    add_dependencies(gps_receiver_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

    add_executable(imu_sensor_node src/peripheral/imu_sensor_node.cpp)
    target_link_libraries(imu_sensor_node westonrobot::wrp_sdk ${catkin_LIBRARIES})
    add_dependencies(imu_sensor_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

    add_executable(ultrasonic_sensor_node src/peripheral/ultrasonic_sensor_node.cpp)
    target_link_libraries(ultrasonic_sensor_node westonrobot::wrp_sdk ${catkin_LIBRARIES})
    add_dependencies(ultrasonic_sensor_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

    add_executable(power_regulator_node src/peripheral/power_regulator_node.cpp)
    target_link_libraries(power_regulator_node westonrobot::wrp_sdk ${catkin_LIBRARIES})
    add_dependencies(power_regulator_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
endif()

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# catkin_install_python(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
install(TARGETS wrp_sdk_ros
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
)

## Mark cpp header files for installation
install(DIRECTORY include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN "*.h"
  PATTERN ".svn" EXCLUDE
)

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_wrp_ros.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
